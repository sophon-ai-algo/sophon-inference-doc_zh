SAIL Python API
===============

SAIL use "pybind11" to wrap python interfaces, support python3.5.

Basic function
_____

.. code-block:: python

        def get_available_tpu_num():
            """ Get the number of available TPUs.

            Returns
            -------
            tpu_num : int
                Number of available TPUs
            """

Data type
_____

.. code-block:: python
        
        # Data type for float32
        sail.Dtype.BM_FLOAT32
        # Data type for int8
        sail.Dtype.BM_INT8

sail.Handle
___________

.. code-block:: python

    def __init__(tpu_id):
        """ Constructor handle instance

        Parameters
        ----------
        tpu_id : int
            create handle with tpu Id
        """

    def free():
        """ free handle
        """

sail.IOMode
___________

.. code-block:: python

        # Input tensors are in system memory while output tensors are in device memory
        sail.IOMode.SYSI
        # Input tensors are in device memory while output tensors are in system memory.
        sail.IOMode.SYSO
        # Both input and output tensors are in system memory.
        sail.IOMode.SYSIO
        # Both input and output tensors are in device memory.
        sail.IOMode.DEVIO

sail.Tensor
___________

**1). Tensor**

    .. code-block:: python

        def __init__(handle, data):
            """ Constructor allocates device memory of the tensor.

            Parameters
            ----------
            handle : sail.Handle
                Handle instance
            array_data : numpy.array
                Tensor ndarray data
            """

        def __init__(handle, shape, dtype, own_sys_data, own_dev_data):
            """ Constructor allocates system memory and device memory of the tensor.

            Parameters
            ----------
            handle : sail.Handle
                Handle instance
            shape : tuple
                Tensor shape
            dytpe : sail.Dtype
                Data type
            own_sys_data : bool
                Indicator of whether own system memory 
            own_dev_data : bool
                Indicator of whether own device memory 
            """

**2). shape**

    .. code-block:: python

        def shape():
            """ Get shape of the tensor.

            Returns
            -------
            tensor_shape : list
                Shape of the tensor
            """

**3). data**

    .. code-block:: python

        def data():
            """ Get system data of the tensor.

            Returns
            -------
            data : numpy.array
                System data of the tensor
            """

**4). update_data**            

    .. code-block:: python

        def update_data(data):
            """ Update system data of the tensor. The data size should not exceed
                the tensor size, and the tensor shape will not be changed. 

            Parameters
            -------
            data : numpy.array
                Data.
            """

**5). dtype**

    .. code-block:: python

        def dtype():
            """ Get data type of the tensor.

            Returns
            -------
            dtype : sail.Dtype
                Data type of the tensor
            """

**6). reshape**            

    .. code-block:: python

        def reshape(shape):
            """ Reset shape of the tensor. 

            Parameters
            -------
            shape : list
                New shape of the tensor
            """

**7). own_sys_data**

    .. code-block:: python

        def own_sys_data():
            """ Judge if the tensor owns data pointer in system memory.

            Returns
            -------
            judge_ret : bool
                True for owns data pointer in system memory.
            """

**8). own_dev_data**

    .. code-block:: python

        def own_dev_data():
            """ Judge if the tensor owns data in device memory.

            Returns
            -------
            judge_ret : bool
                True for owns data in device memory.
            """

**9). sync_s2d**

    .. code-block:: python

        def sync_s2d():
            """ Copy data from system memory to device memory.
            """

        def sync_s2d(size):
            """ Copy data from system memory to device memory with specified size.

            Parameters
            ----------
            size : int
                Byte size to be copied
            """

**10). sync_d2s**

    .. code-block:: python

        def sync_d2s():
            """ Copy data from device memory to system memory.
            """

        def sync_d2s(size):
            """ Copy data from device memory to system memory with specified size.

            Parameters
            ----------
            size : int
                Byte size to be copied
            """

sail.Engine
___________

**1). Engine**

    .. code-block:: python

        def __init__(tpu_id):
            """ Constructor does not load bmodel.

            Parameters
            ----------
            tpu_id : int
                TPU ID. You can use bm-smi to see available IDs
            """

        def __init__(bmodel_path, tpu_id, mode):
            """ Constructor loads bmodel from file.

            Parameters
            ----------
            bmodel_path : str
                Path to bmodel
            tpu_id : int
                TPU ID. You can use bm-smi to see available IDs
            mode : sail.IOMode
                Specify the input/output tensors are in system memory
                or device memory
            """

        def __init__(bmodel_bytes, bmodel_size, tpu_id, mode):
            """ Constructor using default input shapes with bmodel which
            loaded in memory

            Parameters
            ----------
            bmodel_bytes : bytes
                Bytes of  bmodel in system memory
            bmodel_size : int
                Bmodel byte size
            tpu_id : int
                TPU ID. You can use bm-smi to see available IDs
            mode : sail.IOMode
                Specify the input/output tensors are in system memory
                or device memory
            """

**2). get_handle**

    .. code-block:: python

        def get_handle():
            """ Load bmodel from file.

            Returns
            -------
            handle: sail.Handle
               Handle instance
            """

**3). load**

    .. code-block:: python
    
        def load(bmodel_path):
            """ Load bmodel from file.

            Parameters
            ----------
            bmodel_path : str
                Path to bmodel
            """

        def load(bmodel_bytes, bmodel_size):
            """ Load bmodel from file.

            Parameters
            ----------
            bmodel_bytes : bytes
                Bytes of  bmodel in system memory
            bmodel_size : int
                Bmodel byte size
            """

**4). get_graph_names**

    .. code-block:: python

        def get_graph_names():
            """ Get all graph names in the loaded bmodels.

            Returns
            -------
            graph_names : list
                Graph names list in loaded context
            """

**5). graph_is_dynamic**

    .. code-block:: python

        def graph_is_dynamic():
            """ Jugde if the graph is dynamic. 

            Returns
            -------
            judge_ret : int
                0 for dynamic and 1 for static 
            """

**6). get_input_names**

    .. code-block:: python

        def get_input_names(graph_name):
            """ Get all input tensor names of the specified graph.

            Parameters
            ----------
            graph_name : str
                Specified graph name

            Returns
            -------
            input_names : list
                All the input tensor names of the graph
            """

**7). get_output_names**

    .. code-block:: python

        def get_output_names(graph_name):
            """ Get all output tensor names of the specified graph.

            Parameters
            ----------
            graph_name : str
                Specified graph name

            Returns
            -------
            input_names : list
                All the output tensor names of the graph
            """

**8). get_max_input_shapes**

    .. code-block:: python

        def get_max_input_shapes(graph_name):
            """ Get max shapes of input tensors in a graph.
                For static models, the max shape is fixed and it should not be changed.
                For dynamic models, the tensor shape should be smaller than or equal to
                the max shape.

            Parameters
            ----------
            graph_name : str
                The specified graph name

            Returns
            -------
            max_shapes : dict {str : list}
                Max shape of the input tensors
            """

**9). get_input_shape**

    .. code-block:: python

        def get_input_shape(graph_name, tensor_name):
            """ Get the shape of an input tensor in a graph.

            Parameters
            ----------
            graph_name : str
                The specified graph name
            tensor_name : str
                The specified input tensor name

            Returns
            -------
            tensor_shape : list
                The shape of the tensor
            """

**10). get_max_output_shapes**

    .. code-block:: python

        def get_max_output_shapes(graph_name):
            """ Get max shapes of input tensors in a graph.
                For static models, the max shape is fixed and it should not be changed.
                For dynamic models, the tensor shape should be smaller than or equal to
                the max shape.

            Parameters
            ----------
            graph_name : str
                The specified graph name

            Returns
            -------
            max_shapes : dict {str : list}
                Max shape of the output tensors
            """

**11). get_output_shape**

    .. code-block:: python

        def get_output_shape(graph_name, tensor_name):
            """ Get the shape of an output tensor in a graph.

            Parameters
            ----------
            graph_name : str
                The specified graph name
            tensor_name : str
                The specified output tensor name

            Returns
            -------
            tensor_shape : list
                The shape of the tensor
            """

**12). get_input_scale** 

    .. code-block:: python

        def get_input_scale(graph_name, tensor_name)
            """ Get scale of an input tensor. Only used for int8 models. 

            Parameters
            ----------
            graph_name : str
                The specified graph name
            tensor_name : str
                The specified output tensor name

            Returns
            -------
            scale: float32
                Scale of the input tensor
            """

**13). get_output_scale** 

    .. code-block:: python

        def get_output_scale(graph_name, tensor_name)
            """ Get scale of an output tensor. Only used for int8 models.

            Parameters
            ----------
            graph_name : str
                The specified graph name
            tensor_name : str
                The specified output tensor name

            Returns
            -------
            scale: float32
                Scale of the output tensor
            """

**14). process**

    .. code-block:: python

        def process(graph_name, input_tensors):
            """ Inference with provided system data of input tensors.

            Parameters
            ----------
            graph_name : str
                The specified graph name
            input_tensors : dict {str : numpy.array}
                Data of all input tensors in system memory

            Returns
            -------
            output_tensors : dict {str : numpy.array}
                Data of all output tensors in system memory
            """

        def process(graph_name, input_tensors, output_tensors):
            """ Inference with provided input and output tensors.

            Parameters
            ----------
            graph_name : str
                The specified graph name
            input_tensors : dict {str : sail.Tensor}
                Input tensors managed by user
            output_tensors : dict {str : sail.Tensor}
                Output tensors managed by user
            """

sail.Bmdnn
__________

**1). Bmdnn**

    .. code-block:: python

        def __init__(handle):
            """ Bmdnn constructor

            Parameters
            ----------
            handle : sail.Handle
                handle instance
            """

**2). sigmoid**

    .. code-block:: python

        def sigmoid(input, output):
            """ Sigmoid operation.

            Parameters
            ----------
            input : sail.Tensor
                Input tensor
            output : sail.Tensor
                Output tensor

            Returns
            -------
            status : int
                0 for success and other for failure
            """

**3). tanh**

    .. code-block:: python

        def tanh(input, output):
            """ Tanh operation.

            Parameters
            ----------
            input : sail.Tensor
                Input tensor
            output : sail.Tensor
                Output tensor

            Returns
            -------
            status : int
                0 for success and other for failure
            """

**4). softmax**

    .. code-block:: python

        def softmax(input, output):
            """ Softmax operation.

            Parameters
            ----------
            input : sail.Tensor
                Input tensor
            output : sail.Tensor
                Output output

            Returns
            -------
            status : int
                0 for success and other for failure
            """

**5). relu**

    .. code-block:: python

        def relu(input, output):
            """ Relu operation.

            Parameters
            ----------
            input : sail.Tensor
                Input tensor
            output : sail.Tensor
                Output tensor

            Returns
            -------
            status : int
                0 for success and other for failure
            """

**6). matmul**

    .. code-block:: python

        def matmul(input, weight, bias, output):
            """ Matrix multiplication plus bias.

            Parameters
            ----------
            input : sail.Tensor
                Input tensor
            weight : sail.Tensor
                Weight tensor
            bias : sail.Tensor
                Bias tensor
            output : sail.Tensor
                Output image data

            Returns
            -------
            status : int
                0 for success and other for failure
            """

**7). add**

    .. code-block:: python

        def add(input_a, input_b, output):
            """ Addition operation, output = input_a + input_b.

            Parameters
            ----------
            input_a : sail.Tensor
                Input tensor A
            input_b : sail.Tensor
                Input tensor B
            output : sail.Tensor
                Output image data

            Returns
            -------
            status : int
                0 for success and other for failure
            """

**8). sub**

    .. code-block:: python

        def sub(input_a, input_b, output):
            """ Subtraction operation, output = input_a - input_b.

            Parameters
            ----------
            input_a : sail.Tensor
                Input tensor A
            input_b : sail.Tensor
                Input tensor B
            output : sail.Tensor
                Output image data

            Returns
            -------
            status : int
                0 for success and other for failure
            """

**9). mul**

    .. code-block:: python

        def mul(input_a, input_b, output):
            """ Multiplication operation, output = input_a * input_b.

            Parameters
            ----------
            input_a : sail.Tensor
                Input tensor A
            input_b : sail.Tensor
                Input tensor B
            output : sail.Tensor
                Output image data

            Returns
            -------
            status : int
                0 for success and other for failure
            """

**10). div**

    .. code-block:: python

        def mul(input_a, input_b, output):
            """ Division operation, output = input_a / input_b.

            Parameters
            ----------
            input_a : sail.Tensor
                Input tensor A
            input_b : sail.Tensor
                Input tensor B
            output : sail.Tensor
                Output image data

            Returns
            -------
            status : int
                0 for success and other for failure
            """


sail.Bmcv
_________

**1). Bmcv**

    .. code-block:: python

        def __init__(handle):
            """ Bmcv constructor

            Parameters
            ----------
            handle : sail.Handle
                handle instance
            """

**2). resize**

    .. code-block:: python

        def resize(input, output):
            """ Resize an image with interpolation of INTER_NEAREST.

            Parameters
            ----------
            input : sail.Tensor
                Input image data
            output : sail.Tensor
                Output image data

            Returns
            -------
            status : int
                0 for success and other for failure
            """

**3). crop**

    .. code-block:: python

        def crop(input, output, top, left):
            """ Crop an image.

            Parameters
            ----------
            input : sail.Tensor
                Input image data
            output : sail.Tensor
                Output image data
            top : int
                Start point most top from original image
            left : int
                Start point most left from original image

            Returns
            -------
            status : int
                0 for success and other for failure
            """

**4). resize_norm**

    .. code-block:: python

        def resize_norm(input, output, scale_b, bias_b,
                        scale_g, bias_g, scale_r, bias_g):
            """ Resize an image and do normalizition.

            Parameters
            ----------
            input : sail.Tensor
                Input image data
            output : sail.Tensor
                Output image data
            scale_b : float
                Scale factor for channel b
            bias_b : float
                Bias for channel b
            scale_g : float
                Scale factor for channel g
            bias_g ： float
                Bias for channel g
            scale_r : float
                Scale factor for channel r

            Returns
            -------
            status : int
                0 for success and other for failure
            """

**5). transpose**

    .. code-block:: python

        def transpose(input, output):
            """ Transpose an image.

            Parameters
            ----------
            input : sail.Tensor
                Input image data
            output : sail.Tensor
                Output image data

            Returns
            -------
            status : int
                0 for success and other for failure
            """

**6). bgrsplit**

    .. code-block:: python

        def bgrsplit(input, output):
            """Convert packed BGR image data to BGR planar data format.

            Parameters
            ----------
            input : sail.Tensor
                Input image data
            output : sail.Tensor
                Output image data

            Returns
            -------
            status : int
                0 for success and other for failure
            """

